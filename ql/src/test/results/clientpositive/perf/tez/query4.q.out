PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 12 <- Map 29 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 16 <- Map 29 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 14 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 19 <- Map 29 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 23 <- Map 29 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Map 21 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 26 <- Map 29 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE)
Reducer 3 <- Map 29 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 20 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 17 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 13 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 24 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 27 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_339]
        Limit [LIM_338] (rows=100 width=85)
          Number of rows:100
          Select Operator [SEL_337] (rows=5066558 width=85)
            Output:["_col0"]
          <-Reducer 9 [SIMPLE_EDGE]
            SHUFFLE [RS_147]
              Select Operator [SEL_146] (rows=5066558 width=85)
                Output:["_col0"]
                Filter Operator [FIL_145] (rows=5066558 width=533)
                  predicate:((_col1 / _col8) > (_col10 / _col12))
                  Merge Join Operator [MERGEJOIN_278] (rows=15199674 width=533)
                    Conds:RS_142._col2=RS_336._col0(Inner),Output:["_col1","_col5","_col8","_col10","_col12"]
                  <-Reducer 27 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_336]
                      PartitionCols:_col0
                      Select Operator [SEL_335] (rows=17130654 width=212)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_334] (rows=17130654 width=212)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_333] (rows=51391963 width=212)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_332] (rows=51391963 width=764)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 26 [SIMPLE_EDGE]
                              SHUFFLE [RS_125]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_124] (rows=51391963 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_122] (rows=51391963 width=1099)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_273] (rows=51391963 width=1099)
                                      Conds:RS_119._col1=RS_304._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_304]
                                        PartitionCols:_col0
                                        Select Operator [SEL_298] (rows=80000000 width=656)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                          Filter Operator [FIL_297] (rows=80000000 width=656)
                                            predicate:(c_customer_id is not null and c_customer_sk is not null)
                                            TableScan [TS_92] (rows=80000000 width=656)
                                              default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                    <-Reducer 25 [SIMPLE_EDGE]
                                      SHUFFLE [RS_119]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_272] (rows=51391963 width=451)
                                          Conds:RS_328._col0=RS_296._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 28 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_296]
                                            PartitionCols:_col0
                                            Select Operator [SEL_290] (rows=652 width=8)
                                              Output:["_col0"]
                                              Filter Operator [FIL_286] (rows=652 width=8)
                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                TableScan [TS_89] (rows=73049 width=8)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                        <-Map 21 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_328]
                                            PartitionCols:_col0
                                            Select Operator [SEL_326] (rows=143930993 width=455)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Filter Operator [FIL_325] (rows=143930993 width=455)
                                                predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                TableScan [TS_86] (rows=144002668 width=455)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                  <-Reducer 8 [SIMPLE_EDGE]
                    SHUFFLE [RS_142]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_277] (rows=15199674 width=521)
                        Conds:RS_139._col2=RS_331._col0(Inner),Output:["_col1","_col2","_col5","_col8","_col10"]
                      <-Reducer 24 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_331]
                          PartitionCols:_col0
                          Select Operator [SEL_330] (rows=51391963 width=212)
                            Output:["_col0","_col1"]
                            Group By Operator [GBY_329] (rows=51391963 width=764)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 23 [SIMPLE_EDGE]
                              SHUFFLE [RS_104]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_103] (rows=51391963 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_101] (rows=51391963 width=1099)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_271] (rows=51391963 width=1099)
                                      Conds:RS_98._col1=RS_299._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_299]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_298]
                                    <-Reducer 22 [SIMPLE_EDGE]
                                      SHUFFLE [RS_98]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_270] (rows=51391963 width=451)
                                          Conds:RS_327._col0=RS_291._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 28 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_291]
                                            PartitionCols:_col0
                                            Select Operator [SEL_287] (rows=652 width=8)
                                              Output:["_col0"]
                                              Filter Operator [FIL_283] (rows=652 width=8)
                                                predicate:((d_year = 2002) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_89]
                                        <-Map 21 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_327]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_326]
                      <-Reducer 7 [SIMPLE_EDGE]
                        SHUFFLE [RS_139]
                          PartitionCols:_col2
                          Filter Operator [FIL_138] (rows=12710774 width=633)
                            predicate:((_col1 / _col8) > (_col6 / _col3))
                            Merge Join Operator [MERGEJOIN_276] (rows=38132324 width=633)
                              Conds:RS_135._col2=RS_324._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col8"]
                            <-Reducer 13 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_324]
                                PartitionCols:_col0
                                Select Operator [SEL_323] (rows=26666666 width=212)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_322] (rows=26666666 width=212)
                                    predicate:(_col7 > 0)
                                    Select Operator [SEL_321] (rows=80000000 width=212)
                                      Output:["_col0","_col7"]
                                      Group By Operator [GBY_320] (rows=80000000 width=764)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                      <-Reducer 12 [SIMPLE_EDGE]
                                        SHUFFLE [RS_82]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                          Group By Operator [GBY_81] (rows=80000000 width=764)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                            Select Operator [SEL_79] (rows=101084444 width=1093)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                              Merge Join Operator [MERGEJOIN_269] (rows=101084444 width=1093)
                                                Conds:RS_76._col1=RS_303._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                              <-Map 29 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_303]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_298]
                                              <-Reducer 11 [SIMPLE_EDGE]
                                                SHUFFLE [RS_76]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_268] (rows=101084444 width=445)
                                                    Conds:RS_282._col0=RS_295._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                  <-Map 28 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_295]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_289] (rows=652 width=8)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_285] (rows=652 width=8)
                                                          predicate:((d_year = 2001) and d_date_sk is not null)
                                                           Please refer to the previous TableScan [TS_89]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_282]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_280] (rows=285117831 width=453)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                        Filter Operator [FIL_279] (rows=285117831 width=453)
                                                          predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                          TableScan [TS_0] (rows=287989836 width=453)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                            <-Reducer 6 [SIMPLE_EDGE]
                              SHUFFLE [RS_135]
                                PartitionCols:_col2
                                Merge Join Operator [MERGEJOIN_275] (rows=38132324 width=521)
                                  Conds:RS_132._col2=RS_319._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                <-Reducer 17 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_319]
                                    PartitionCols:_col0
                                    Select Operator [SEL_318] (rows=80000000 width=297)
                                      Output:["_col0","_col1","_col2"]
                                      Group By Operator [GBY_317] (rows=80000000 width=764)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                      <-Reducer 16 [SIMPLE_EDGE]
                                        SHUFFLE [RS_61]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                          Group By Operator [GBY_60] (rows=80000000 width=764)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                            Select Operator [SEL_58] (rows=187573258 width=1043)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                              Merge Join Operator [MERGEJOIN_267] (rows=187573258 width=1043)
                                                Conds:RS_55._col1=RS_300._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                              <-Map 29 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_300]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_298]
                                              <-Reducer 15 [SIMPLE_EDGE]
                                                SHUFFLE [RS_55]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_266] (rows=187573258 width=395)
                                                    Conds:RS_310._col0=RS_292._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                  <-Map 28 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_292]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_287]
                                                  <-Map 14 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_310]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_309] (rows=525327388 width=435)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                        Filter Operator [FIL_308] (rows=525327388 width=435)
                                                          predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                          TableScan [TS_43] (rows=575995635 width=435)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                <-Reducer 5 [SIMPLE_EDGE]
                                  SHUFFLE [RS_132]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_274] (rows=31888273 width=324)
                                      Conds:RS_307._col0=RS_316._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Reducer 20 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_316]
                                        PartitionCols:_col0
                                        Select Operator [SEL_315] (rows=26666666 width=212)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_314] (rows=26666666 width=212)
                                            predicate:(_col7 > 0)
                                            Select Operator [SEL_313] (rows=80000000 width=212)
                                              Output:["_col0","_col7"]
                                              Group By Operator [GBY_312] (rows=80000000 width=764)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                              <-Reducer 19 [SIMPLE_EDGE]
                                                SHUFFLE [RS_39]
                                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                  Group By Operator [GBY_38] (rows=80000000 width=764)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                    Select Operator [SEL_36] (rows=187573258 width=1043)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                      Merge Join Operator [MERGEJOIN_265] (rows=187573258 width=1043)
                                                        Conds:RS_33._col1=RS_302._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                                      <-Map 29 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_302]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_298]
                                                      <-Reducer 18 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_33]
                                                          PartitionCols:_col1
                                                          Merge Join Operator [MERGEJOIN_264] (rows=187573258 width=395)
                                                            Conds:RS_311._col0=RS_294._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                          <-Map 28 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_294]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_288] (rows=652 width=8)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_284] (rows=652 width=8)
                                                                  predicate:((d_year = 2001) and d_date_sk is not null)
                                                                   Please refer to the previous TableScan [TS_89]
                                                          <-Map 14 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_311]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_309]
                                    <-Reducer 4 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_307]
                                        PartitionCols:_col0
                                        Select Operator [SEL_306] (rows=80000000 width=212)
                                          Output:["_col0","_col1"]
                                          Group By Operator [GBY_305] (rows=80000000 width=764)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                          <-Reducer 3 [SIMPLE_EDGE]
                                            SHUFFLE [RS_18]
                                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                              Group By Operator [GBY_17] (rows=80000000 width=764)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                Select Operator [SEL_15] (rows=101084444 width=1093)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                  Merge Join Operator [MERGEJOIN_263] (rows=101084444 width=1093)
                                                    Conds:RS_12._col1=RS_301._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                                  <-Map 29 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_301]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_298]
                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_12]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_262] (rows=101084444 width=445)
                                                        Conds:RS_281._col0=RS_293._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                      <-Map 28 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_293]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_287]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_281]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_280]

