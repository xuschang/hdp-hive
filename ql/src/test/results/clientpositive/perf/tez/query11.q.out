PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year 
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.c_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 2001
         and t_s_secyear.dyear = 2001+1
         and t_w_firstyear.dyear = 2001
         and t_w_secyear.dyear = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by t_s_secyear.c_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year 
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.c_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 2001
         and t_s_secyear.dyear = 2001+1
         and t_w_firstyear.dyear = 2001
         and t_w_secyear.dyear = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by t_s_secyear.c_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 20 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 14 <- Map 20 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 12 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 17 <- Map 20 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 3 <- Map 20 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 18 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 15 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 11 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_215]
        Limit [LIM_214] (rows=100 width=85)
          Number of rows:100
          Select Operator [SEL_213] (rows=8165395 width=85)
            Output:["_col0"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_97]
              Select Operator [SEL_96] (rows=8165395 width=85)
                Output:["_col0"]
                Filter Operator [FIL_95] (rows=8165395 width=533)
                  predicate:((_col1 / _col8) > (_col6 / _col3))
                  Merge Join Operator [MERGEJOIN_172] (rows=24496187 width=533)
                    Conds:RS_92._col2=RS_212._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col8"]
                  <-Reducer 11 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_212]
                      PartitionCols:_col0
                      Select Operator [SEL_211] (rows=17130654 width=212)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_210] (rows=17130654 width=212)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_209] (rows=51391963 width=212)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_208] (rows=51391963 width=764)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 10 [SIMPLE_EDGE]
                              SHUFFLE [RS_82]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_81] (rows=51391963 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_79] (rows=51391963 width=875)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_169] (rows=51391963 width=875)
                                      Conds:RS_76._col1=RS_192._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                    <-Map 20 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_192]
                                        PartitionCols:_col0
                                        Select Operator [SEL_188] (rows=80000000 width=656)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                          Filter Operator [FIL_187] (rows=80000000 width=656)
                                            predicate:(c_customer_id is not null and c_customer_sk is not null)
                                            TableScan [TS_49] (rows=80000000 width=656)
                                              default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                    <-Reducer 9 [SIMPLE_EDGE]
                                      SHUFFLE [RS_76]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_168] (rows=51391963 width=227)
                                          Conds:RS_176._col0=RS_186._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 19 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_186]
                                            PartitionCols:_col0
                                            Select Operator [SEL_182] (rows=652 width=8)
                                              Output:["_col0"]
                                              Filter Operator [FIL_179] (rows=652 width=8)
                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                TableScan [TS_46] (rows=73049 width=8)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_176]
                                            PartitionCols:_col0
                                            Select Operator [SEL_174] (rows=143930993 width=231)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_173] (rows=143930993 width=231)
                                                predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                TableScan [TS_0] (rows=144002668 width=231)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_list_price"]
                  <-Reducer 6 [SIMPLE_EDGE]
                    SHUFFLE [RS_92]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_171] (rows=38132324 width=521)
                        Conds:RS_89._col2=RS_207._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                      <-Reducer 15 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_207]
                          PartitionCols:_col0
                          Select Operator [SEL_206] (rows=80000000 width=297)
                            Output:["_col0","_col1","_col2"]
                            Group By Operator [GBY_205] (rows=80000000 width=764)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 14 [SIMPLE_EDGE]
                              SHUFFLE [RS_61]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_60] (rows=80000000 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_58] (rows=187573258 width=847)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_167] (rows=187573258 width=847)
                                      Conds:RS_55._col1=RS_189._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                    <-Map 20 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_189]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_188]
                                    <-Reducer 13 [SIMPLE_EDGE]
                                      SHUFFLE [RS_55]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_166] (rows=187573258 width=199)
                                          Conds:RS_198._col0=RS_183._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 19 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_183]
                                            PartitionCols:_col0
                                            Select Operator [SEL_180] (rows=652 width=8)
                                              Output:["_col0"]
                                              Filter Operator [FIL_177] (rows=652 width=8)
                                                predicate:((d_year = 2002) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_46]
                                        <-Map 12 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_198]
                                            PartitionCols:_col0
                                            Select Operator [SEL_197] (rows=525327388 width=221)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_196] (rows=525327388 width=221)
                                                predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                TableScan [TS_43] (rows=575995635 width=221)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_list_price"]
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_89]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_170] (rows=31888273 width=324)
                            Conds:RS_195._col0=RS_204._col0(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 18 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_204]
                              PartitionCols:_col0
                              Select Operator [SEL_203] (rows=26666666 width=212)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_202] (rows=26666666 width=212)
                                  predicate:(_col7 > 0)
                                  Select Operator [SEL_201] (rows=80000000 width=212)
                                    Output:["_col0","_col7"]
                                    Group By Operator [GBY_200] (rows=80000000 width=764)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                    <-Reducer 17 [SIMPLE_EDGE]
                                      SHUFFLE [RS_39]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                        Group By Operator [GBY_38] (rows=80000000 width=764)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                          Select Operator [SEL_36] (rows=187573258 width=847)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Merge Join Operator [MERGEJOIN_165] (rows=187573258 width=847)
                                              Conds:RS_33._col1=RS_191._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                            <-Map 20 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_191]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_188]
                                            <-Reducer 16 [SIMPLE_EDGE]
                                              SHUFFLE [RS_33]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_164] (rows=187573258 width=199)
                                                  Conds:RS_199._col0=RS_185._col0(Inner),Output:["_col1","_col2","_col3"]
                                                <-Map 19 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_185]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_181] (rows=652 width=8)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_178] (rows=652 width=8)
                                                        predicate:((d_year = 2001) and d_date_sk is not null)
                                                         Please refer to the previous TableScan [TS_46]
                                                <-Map 12 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_199]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_197]
                          <-Reducer 4 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_195]
                              PartitionCols:_col0
                              Select Operator [SEL_194] (rows=51391963 width=212)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_193] (rows=51391963 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_18]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Group By Operator [GBY_17] (rows=51391963 width=764)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                      Select Operator [SEL_15] (rows=51391963 width=875)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Merge Join Operator [MERGEJOIN_163] (rows=51391963 width=875)
                                          Conds:RS_12._col1=RS_190._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_190]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_188]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_12]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_162] (rows=51391963 width=227)
                                              Conds:RS_175._col0=RS_184._col0(Inner),Output:["_col1","_col2","_col3"]
                                            <-Map 19 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_184]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_180]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_175]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_174]

