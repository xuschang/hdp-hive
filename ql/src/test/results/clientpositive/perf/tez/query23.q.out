Warning: Shuffle Join MERGEJOIN[381][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 22' is a cross product
Warning: Shuffle Join MERGEJOIN[382][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 23' is a cross product
Warning: Shuffle Join MERGEJOIN[384][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 26' is a cross product
Warning: Shuffle Join MERGEJOIN[385][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 27' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 27 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 13 <- Map 16 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 19 <- Map 33 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 24 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE), Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (CUSTOM_SIMPLE_EDGE), Reducer 28 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (CUSTOM_SIMPLE_EDGE), Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 14 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 31 <- Map 30 (SIMPLE_EDGE), Map 33 (SIMPLE_EDGE)
Reducer 32 <- Reducer 31 (SIMPLE_EDGE)
Reducer 4 <- Reducer 23 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 34 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 14 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_459]
        Limit [LIM_458] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_457] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 5 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 10 [CONTAINS]
              Reduce Output Operator [RS_396]
                Group By Operator [GBY_395] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_393] (rows=6 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_392] (rows=6 width=19)
                      Conds:RS_248._col2=RS_249._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 27 [SIMPLE_EDGE]
                      SHUFFLE [RS_249]
                        PartitionCols:_col0
                        Select Operator [SEL_241] (rows=450644 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_240] (rows=450644 width=228)
                            predicate:(_col3 > (0.95 * _col1))
                            Merge Join Operator [MERGEJOIN_385] (rows=1351933 width=228)
                              Conds:(Inner),Output:["_col1","_col2","_col3"]
                            <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_456]
                                Group By Operator [GBY_454] (rows=1351933 width=116)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 31 [SIMPLE_EDGE]
                                  SHUFFLE [RS_105]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_104] (rows=550080312 width=116)
                                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                      Select Operator [SEL_102] (rows=550080312 width=114)
                                        Output:["_col0","_col1"]
                                        Merge Join Operator [MERGEJOIN_370] (rows=550080312 width=114)
                                          Conds:RS_453._col0=RS_428._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 33 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_428]
                                            PartitionCols:_col0
                                            Select Operator [SEL_427] (rows=80000000 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_426] (rows=80000000 width=4)
                                                predicate:c_customer_sk is not null
                                                TableScan [TS_96] (rows=80000000 width=4)
                                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk"]
                                        <-Map 30 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_453]
                                            PartitionCols:_col0
                                            Select Operator [SEL_452] (rows=550080312 width=114)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_451] (rows=550080312 width=114)
                                                predicate:ss_customer_sk is not null
                                                TableScan [TS_93] (rows=575995635 width=114)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                            <-Reducer 26 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_237]
                                Merge Join Operator [MERGEJOIN_384] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_468]
                                    Select Operator [SEL_467] (rows=1 width=8)
                                      Filter Operator [FIL_466] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_465] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_464] (rows=1 width=8)
                                            Group By Operator [GBY_463] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_441]
                                                Group By Operator [GBY_437] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_433] (rows=11859 width=116)
                                                    Output:["_col0"]
                                                    Group By Operator [GBY_430] (rows=11859 width=116)
                                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                    <-Reducer 19 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_51]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_50] (rows=11859 width=116)
                                                          Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                          Select Operator [SEL_48] (rows=18762463 width=4)
                                                            Output:["_col0","_col1"]
                                                            Merge Join Operator [MERGEJOIN_367] (rows=18762463 width=4)
                                                              Conds:RS_45._col1=RS_429._col0(Inner),Output:["_col2","_col3","_col6"]
                                                            <-Map 33 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_429]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_427]
                                                            <-Reducer 18 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_45]
                                                                PartitionCols:_col1
                                                                Merge Join Operator [MERGEJOIN_366] (rows=18762463 width=0)
                                                                  Conds:RS_422._col0=RS_425._col0(Inner),Output:["_col1","_col2","_col3"]
                                                                <-Map 17 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_422]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_421] (rows=525327388 width=118)
                                                                      Output:["_col0","_col1","_col2","_col3"]
                                                                      Filter Operator [FIL_420] (rows=525327388 width=118)
                                                                        predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                        TableScan [TS_33] (rows=575995635 width=118)
                                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                                <-Map 29 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_425]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_424] (rows=2609 width=8)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_423] (rows=2609 width=8)
                                                                        predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                                        TableScan [TS_36] (rows=73049 width=8)
                                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_470]
                                    Group By Operator [GBY_469] (rows=1 width=112)
                                      Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                    <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_442]
                                        Group By Operator [GBY_438] (rows=1 width=112)
                                          Output:["_col0"],aggregations:["max(_col1)"]
                                          Select Operator [SEL_434] (rows=11859 width=116)
                                            Output:["_col1"]
                                             Please refer to the previous Group By Operator [GBY_430]
                    <-Reducer 9 [SIMPLE_EDGE]
                      SHUFFLE [RS_248]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_380] (rows=148 width=0)
                          Conds:RS_245._col1=RS_419._col0(Inner),Output:["_col2","_col3","_col4"]
                        <-Reducer 14 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_419]
                            PartitionCols:_col0
                            Group By Operator [GBY_417] (rows=2134 width=4)
                              Output:["_col0"],keys:_col1
                              Select Operator [SEL_416] (rows=6548799 width=12)
                                Output:["_col1"]
                                Filter Operator [FIL_415] (rows=6548799 width=12)
                                  predicate:(_col3 > 4L)
                                  Select Operator [SEL_414] (rows=19646398 width=12)
                                    Output:["_col0","_col3"]
                                    Group By Operator [GBY_413] (rows=19646398 width=290)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 13 [SIMPLE_EDGE]
                                      SHUFFLE [RS_24]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_23] (rows=19646398 width=290)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                          Select Operator [SEL_21] (rows=19646398 width=282)
                                            Output:["_col0","_col1","_col2"]
                                            Merge Join Operator [MERGEJOIN_365] (rows=19646398 width=282)
                                              Conds:RS_18._col1=RS_412._col0(Inner),Output:["_col3","_col5","_col6"]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_412]
                                                PartitionCols:_col0
                                                Select Operator [SEL_411] (rows=462000 width=188)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_410] (rows=462000 width=188)
                                                    predicate:i_item_sk is not null
                                                    TableScan [TS_12] (rows=462000 width=188)
                                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                                            <-Reducer 12 [SIMPLE_EDGE]
                                              SHUFFLE [RS_18]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_364] (rows=19646398 width=98)
                                                  Conds:RS_406._col0=RS_409._col0(Inner),Output:["_col1","_col3"]
                                                <-Map 11 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_406]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_405] (rows=550076554 width=7)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_404] (rows=550076554 width=7)
                                                        predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                        TableScan [TS_6] (rows=575995635 width=7)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_409]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_408] (rows=2609 width=102)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_407] (rows=2609 width=102)
                                                        predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                        TableScan [TS_9] (rows=73049 width=102)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_year"]
                        <-Reducer 8 [SIMPLE_EDGE]
                          SHUFFLE [RS_245]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_371] (rows=3941102 width=122)
                              Conds:RS_462._col0=RS_403._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_403]
                                PartitionCols:_col0
                                Select Operator [SEL_401] (rows=50 width=12)
                                  Output:["_col0"]
                                  Filter Operator [FIL_400] (rows=50 width=12)
                                    predicate:((d_moy = 1) and (d_year = 1999) and d_date_sk is not null)
                                    TableScan [TS_3] (rows=73049 width=12)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                            <-Map 34 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_462]
                                PartitionCols:_col0
                                Select Operator [SEL_461] (rows=143930993 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_460] (rows=143930993 width=127)
                                    predicate:(ws_bill_customer_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                    TableScan [TS_126] (rows=144002668 width=127)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
            <-Reducer 4 [CONTAINS]
              Reduce Output Operator [RS_391]
                Group By Operator [GBY_390] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_388] (rows=12 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_387] (rows=12 width=9)
                      Conds:RS_122._col1=RS_123._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 23 [SIMPLE_EDGE]
                      SHUFFLE [RS_123]
                        PartitionCols:_col0
                        Select Operator [SEL_115] (rows=450644 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_114] (rows=450644 width=228)
                            predicate:(_col3 > (0.95 * _col1))
                            Merge Join Operator [MERGEJOIN_382] (rows=1351933 width=228)
                              Conds:(Inner),Output:["_col1","_col2","_col3"]
                            <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_455]
                                 Please refer to the previous Group By Operator [GBY_454]
                            <-Reducer 22 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_111]
                                Merge Join Operator [MERGEJOIN_381] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_448]
                                    Select Operator [SEL_447] (rows=1 width=8)
                                      Filter Operator [FIL_446] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_445] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_444] (rows=1 width=8)
                                            Group By Operator [GBY_443] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_439]
                                                Group By Operator [GBY_435] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_431] (rows=11859 width=116)
                                                    Output:["_col0"]
                                                     Please refer to the previous Group By Operator [GBY_430]
                                <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_450]
                                    Group By Operator [GBY_449] (rows=1 width=112)
                                      Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                    <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_440]
                                        Group By Operator [GBY_436] (rows=1 width=112)
                                          Output:["_col0"],aggregations:["max(_col1)"]
                                          Select Operator [SEL_432] (rows=11859 width=116)
                                            Output:["_col1"]
                                             Please refer to the previous Group By Operator [GBY_430]
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_122]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_379] (rows=290 width=0)
                          Conds:RS_119._col2=RS_418._col0(Inner),Output:["_col1","_col3","_col4"]
                        <-Reducer 14 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_418]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_417]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_119]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_363] (rows=7751875 width=101)
                              Conds:RS_399._col0=RS_402._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_402]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_401]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_399]
                                PartitionCols:_col0
                                Select Operator [SEL_398] (rows=285117831 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_397] (rows=285117831 width=127)
                                    predicate:(cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                    TableScan [TS_0] (rows=287989836 width=127)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]

