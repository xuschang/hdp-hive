PREHOOK: query: explain
select avg(ss_quantity)
       ,avg(ss_ext_sales_price)
       ,avg(ss_ext_wholesale_cost)
       ,sum(ss_ext_wholesale_cost)
 from store_sales
     ,store
     ,customer_demographics
     ,household_demographics
     ,customer_address
     ,date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2001
 and((ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'M'
  and cd_education_status = '4 yr Degree'
  and ss_sales_price between 100.00 and 150.00
  and hd_dep_count = 3   
     )or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'D'
  and cd_education_status = 'Primary'
  and ss_sales_price between 50.00 and 100.00   
  and hd_dep_count = 1
     ) or 
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'U'
  and cd_education_status = 'Advanced Degree'
  and ss_sales_price between 150.00 and 200.00 
  and hd_dep_count = 1  
     ))
 and((ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 100 and 200  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 300  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 250  
     ))
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select avg(ss_quantity)
       ,avg(ss_ext_sales_price)
       ,avg(ss_ext_wholesale_cost)
       ,sum(ss_ext_wholesale_cost)
 from store_sales
     ,store
     ,customer_demographics
     ,household_demographics
     ,customer_address
     ,date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2001
 and((ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'M'
  and cd_education_status = '4 yr Degree'
  and ss_sales_price between 100.00 and 150.00
  and hd_dep_count = 3   
     )or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'D'
  and cd_education_status = 'Primary'
  and ss_sales_price between 50.00 and 100.00   
  and hd_dep_count = 1
     ) or 
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'U'
  and cd_education_status = 'Advanced Degree'
  and ss_sales_price between 150.00 and 200.00 
  and hd_dep_count = 1  
     ))
 and((ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 100 and 200  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 300  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 250  
     ))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 12 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_92]
        Select Operator [SEL_91] (rows=1 width=344)
          Output:["_col0","_col1","_col2","_col3"]
          Group By Operator [GBY_90] (rows=1 width=256)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","count(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)"]
          <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_37]
              Group By Operator [GBY_36] (rows=1 width=256)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col6)","count(_col6)","sum(_col8)","count(_col8)","sum(_col9)","count(_col9)"]
                Select Operator [SEL_35] (rows=4920 width=187)
                  Output:["_col6","_col8","_col9"]
                  Filter Operator [FIL_34] (rows=4920 width=187)
                    predicate:(((_col19 = 'D') and (_col20 = 'Primary') and _col7 BETWEEN 50 AND 100 and (_col14 = 1)) or ((_col19 = 'M') and (_col20 = '4 yr Degree') and _col7 BETWEEN 100 AND 150 and (_col14 = 3)) or ((_col19 = 'U') and (_col20 = 'Advanced Degree') and _col7 BETWEEN 150 AND 200 and (_col14 = 1)))
                    Merge Join Operator [MERGEJOIN_71] (rows=59062 width=187)
                      Conds:RS_31._col2=RS_89._col0(Inner),Output:["_col6","_col7","_col8","_col9","_col14","_col19","_col20"]
                    <-Map 12 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_89]
                        PartitionCols:_col0
                        Select Operator [SEL_88] (rows=265971 width=183)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_87] (rows=265971 width=183)
                            predicate:((cd_education_status) IN ('4 yr Degree', 'Primary', 'Advanced Degree') and (cd_marital_status) IN ('M', 'D', 'U') and cd_demo_sk is not null)
                            TableScan [TS_15] (rows=1861800 width=183)
                              default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]
                    <-Reducer 5 [SIMPLE_EDGE]
                      SHUFFLE [RS_31]
                        PartitionCols:_col2
                        Filter Operator [FIL_30] (rows=58239 width=90)
                          predicate:(((_col16) IN ('KY', 'GA', 'NM') and _col10 BETWEEN 100 AND 200) or ((_col16) IN ('MT', 'OR', 'IN') and _col10 BETWEEN 150 AND 300) or ((_col16) IN ('WI', 'MO', 'WV') and _col10 BETWEEN 50 AND 250))
                          Merge Join Operator [MERGEJOIN_70] (rows=291204 width=90)
                            Conds:RS_27._col4=RS_86._col0(Inner),Output:["_col2","_col6","_col7","_col8","_col9","_col10","_col14","_col16"]
                          <-Map 11 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_86]
                              PartitionCols:_col0
                              Select Operator [SEL_85] (rows=3529412 width=187)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_84] (rows=3529412 width=187)
                                  predicate:((ca_country = 'United States') and (ca_state) IN ('KY', 'GA', 'NM', 'MT', 'OR', 'IN', 'WI', 'MO', 'WV') and ca_address_sk is not null)
                                  TableScan [TS_12] (rows=40000000 width=187)
                                    default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state","ca_country"]
                          <-Reducer 4 [SIMPLE_EDGE]
                            SHUFFLE [RS_27]
                              PartitionCols:_col4
                              Merge Join Operator [MERGEJOIN_69] (rows=3300311 width=145)
                                Conds:RS_24._col3=RS_83._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8","_col9","_col10","_col14"]
                              <-Map 10 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_83]
                                  PartitionCols:_col0
                                  Select Operator [SEL_82] (rows=1309 width=8)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_81] (rows=1309 width=8)
                                      predicate:((hd_dep_count) IN (3, 1) and hd_demo_sk is not null)
                                      TableScan [TS_9] (rows=7200 width=8)
                                        default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count"]
                              <-Reducer 3 [SIMPLE_EDGE]
                                SHUFFLE [RS_24]
                                  PartitionCols:_col3
                                  Merge Join Operator [MERGEJOIN_68] (rows=18152968 width=405)
                                    Conds:RS_21._col1=RS_80._col0(Inner),Output:["_col2","_col3","_col4","_col6","_col7","_col8","_col9","_col10"]
                                  <-Map 9 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_80]
                                      PartitionCols:_col0
                                      Select Operator [SEL_79] (rows=652 width=8)
                                        Output:["_col0"]
                                        Filter Operator [FIL_78] (rows=652 width=8)
                                          predicate:((d_year = 2001) and d_date_sk is not null)
                                          TableScan [TS_6] (rows=73049 width=8)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    SHUFFLE [RS_21]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_67] (rows=50840141 width=446)
                                        Conds:RS_74._col0=RS_77._col4(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col9","_col10"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_74]
                                          PartitionCols:_col0
                                          Select Operator [SEL_73] (rows=1704 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_72] (rows=1704 width=4)
                                              predicate:s_store_sk is not null
                                              TableScan [TS_0] (rows=1704 width=4)
                                                default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_77]
                                          PartitionCols:_col4
                                          Select Operator [SEL_76] (rows=50840141 width=450)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                                            Filter Operator [FIL_75] (rows=50840141 width=450)
                                              predicate:((ss_net_profit BETWEEN 100 AND 200 or ss_net_profit BETWEEN 150 AND 300 or ss_net_profit BETWEEN 50 AND 250) and (ss_sales_price BETWEEN 100 AND 150 or ss_sales_price BETWEEN 50 AND 100 or ss_sales_price BETWEEN 150 AND 200) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_hdemo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_3] (rows=575995635 width=450)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_quantity","ss_sales_price","ss_ext_sales_price","ss_ext_wholesale_cost","ss_net_profit"]

