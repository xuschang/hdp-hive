Warning: Shuffle Join MERGEJOIN[890][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[902][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[892][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[914][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 14' is a cross product
Warning: Shuffle Join MERGEJOIN[894][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[926][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 12 <- Union 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 57 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 15 <- Map 1 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 17 <- Union 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 61 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 23 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 27 <- Union 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 24 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 30 <- Union 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 24 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 33 <- Union 32 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 36 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 37 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 40 <- Map 38 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 41 <- Map 38 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 43 <- Map 42 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 44 <- Map 42 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 45 <- Map 42 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 49 <- Map 48 (SIMPLE_EDGE), Map 53 (SIMPLE_EDGE)
Reducer 5 <- Reducer 27 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 50 <- Reducer 49 (SIMPLE_EDGE), Reducer 68 (SIMPLE_EDGE)
Reducer 51 <- Map 90 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE)
Reducer 52 <- Reducer 51 (SIMPLE_EDGE)
Reducer 54 <- Map 53 (SIMPLE_EDGE), Map 91 (SIMPLE_EDGE)
Reducer 55 <- Reducer 54 (SIMPLE_EDGE), Reducer 72 (SIMPLE_EDGE)
Reducer 56 <- Map 90 (SIMPLE_EDGE), Reducer 55 (SIMPLE_EDGE)
Reducer 57 <- Reducer 56 (SIMPLE_EDGE)
Reducer 58 <- Map 53 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE)
Reducer 59 <- Reducer 58 (SIMPLE_EDGE), Reducer 76 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Map 90 (SIMPLE_EDGE), Reducer 59 (SIMPLE_EDGE)
Reducer 61 <- Reducer 60 (SIMPLE_EDGE)
Reducer 63 <- Map 62 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE)
Reducer 64 <- Map 90 (SIMPLE_EDGE), Reducer 63 (SIMPLE_EDGE)
Reducer 65 <- Reducer 64 (SIMPLE_EDGE), Union 66 (CONTAINS)
Reducer 67 <- Union 66 (SIMPLE_EDGE)
Reducer 68 <- Map 90 (SIMPLE_EDGE), Reducer 67 (SIMPLE_EDGE)
Reducer 69 <- Reducer 64 (SIMPLE_EDGE), Union 70 (CONTAINS)
Reducer 71 <- Union 70 (SIMPLE_EDGE)
Reducer 72 <- Map 90 (SIMPLE_EDGE), Reducer 71 (SIMPLE_EDGE)
Reducer 73 <- Reducer 64 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 75 <- Union 74 (SIMPLE_EDGE)
Reducer 76 <- Map 90 (SIMPLE_EDGE), Reducer 75 (SIMPLE_EDGE)
Reducer 78 <- Map 77 (SIMPLE_EDGE), Map 88 (SIMPLE_EDGE)
Reducer 79 <- Map 90 (SIMPLE_EDGE), Reducer 78 (SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 80 <- Reducer 79 (SIMPLE_EDGE), Union 66 (CONTAINS)
Reducer 81 <- Reducer 79 (SIMPLE_EDGE), Union 70 (CONTAINS)
Reducer 82 <- Reducer 79 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 83 <- Map 77 (SIMPLE_EDGE), Map 89 (SIMPLE_EDGE)
Reducer 84 <- Map 90 (SIMPLE_EDGE), Reducer 83 (SIMPLE_EDGE)
Reducer 85 <- Reducer 84 (SIMPLE_EDGE), Union 66 (CONTAINS)
Reducer 86 <- Reducer 84 (SIMPLE_EDGE), Union 70 (CONTAINS)
Reducer 87 <- Reducer 84 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1126]
        Limit [LIM_1125] (rows=7 width=209)
          Number of rows:100
          Select Operator [SEL_1124] (rows=7 width=209)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1123]
              Select Operator [SEL_1122] (rows=7 width=209)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1121] (rows=7 width=217)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 14 [CONTAINS]
                    Reduce Output Operator [RS_919]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_918] (rows=7 width=217)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_916] (rows=1 width=223)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_915] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_914] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_371]
                                Merge Join Operator [MERGEJOIN_892] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1132]
                                    Select Operator [SEL_1131] (rows=1 width=8)
                                      Filter Operator [FIL_1130] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1129] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1128] (rows=1 width=8)
                                            Group By Operator [GBY_1127] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 11 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 10 [CONTAINS]
                                                Reduce Output Operator [RS_913]
                                                  Group By Operator [GBY_912] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_911] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_909] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_908] (rows=14736682 width=0)
                                                          Conds:RS_1061._col0=RS_1070._col0(Inner),Output:["_col1"]
                                                        <-Map 77 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1070]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1064] (rows=1957 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1063] (rows=1957 width=8)
                                                                predicate:d_year BETWEEN 1999 AND 2001
                                                                TableScan [TS_94] (rows=73049 width=8)
                                                                  default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1061]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1059] (rows=550076554 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1058] (rows=550076554 width=7)
                                                                predicate:ss_sold_date_sk is not null
                                                                TableScan [TS_0] (rows=575995635 width=7)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity"]
                                              <-Reducer 22 [CONTAINS]
                                                Reduce Output Operator [RS_943]
                                                  Group By Operator [GBY_942] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_941] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_939] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_938] (rows=7676736 width=3)
                                                          Conds:RS_1166._col0=RS_1172._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1172]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1169] (rows=1957 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1168] (rows=1957 width=8)
                                                                predicate:d_year BETWEEN 1998 AND 2000
                                                                TableScan [TS_13] (rows=73049 width=8)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1166]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1164] (rows=286549727 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1163] (rows=286549727 width=7)
                                                                predicate:cs_sold_date_sk is not null
                                                                TableScan [TS_10] (rows=287989836 width=7)
                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity"]
                                              <-Reducer 36 [CONTAINS]
                                                Reduce Output Operator [RS_979]
                                                  Group By Operator [GBY_978] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_977] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_975] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_974] (rows=3856907 width=3)
                                                          Conds:RS_1184._col0=RS_1190._col0(Inner),Output:["_col1"]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1190]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1187] (rows=1957 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1186] (rows=1957 width=8)
                                                                predicate:d_year BETWEEN 1998 AND 2000
                                                                TableScan [TS_24] (rows=73049 width=8)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1184]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1182] (rows=143966864 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1181] (rows=143966864 width=7)
                                                                predicate:ws_sold_date_sk is not null
                                                                TableScan [TS_21] (rows=144002668 width=7)
                                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity"]
                                <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1135]
                                    Select Operator [SEL_1134] (rows=1 width=112)
                                      Output:["_col0"]
                                      Group By Operator [GBY_1133] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 29 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 28 [CONTAINS]
                                          Reduce Output Operator [RS_961]
                                            Group By Operator [GBY_960] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_959] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_957] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_956] (rows=7676736 width=94)
                                                    Conds:RS_1179._col0=RS_1173._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1173]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1169]
                                                  <-Map 46 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1179]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1177] (rows=286549727 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1176] (rows=286549727 width=119)
                                                          predicate:cs_sold_date_sk is not null
                                                          TableScan [TS_55] (rows=287989836 width=119)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                        <-Reducer 40 [CONTAINS]
                                          Reduce Output Operator [RS_997]
                                            Group By Operator [GBY_996] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_995] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_993] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_992] (rows=3856907 width=114)
                                                    Conds:RS_1197._col0=RS_1191._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1191]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1187]
                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1197]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1195] (rows=143966864 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1194] (rows=143966864 width=119)
                                                          predicate:ws_sold_date_sk is not null
                                                          TableScan [TS_66] (rows=144002668 width=119)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                        <-Reducer 44 [CONTAINS]
                                          Reduce Output Operator [RS_1015]
                                            Group By Operator [GBY_1014] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1013] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1011] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1010] (rows=14736682 width=0)
                                                    Conds:RS_1202._col0=RS_1071._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1071]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1064]
                                                  <-Map 42 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1202]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1200] (rows=550076554 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1199] (rows=550076554 width=114)
                                                          predicate:ss_sold_date_sk is not null
                                                          TableScan [TS_45] (rows=575995635 width=114)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                            <-Reducer 57 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1144]
                                Group By Operator [GBY_1143] (rows=1 width=132)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 56 [SIMPLE_EDGE]
                                  SHUFFLE [RS_365]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_364] (rows=1 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                      Select Operator [SEL_362] (rows=1 width=128)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Merge Join Operator [MERGEJOIN_861] (rows=1 width=128)
                                          Conds:RS_359._col1=RS_1109._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                        <-Map 90 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_1109]
                                            PartitionCols:_col0
                                            Select Operator [SEL_1100] (rows=462000 width=15)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              TableScan [TS_163] (rows=462000 width=15)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                        <-Reducer 55 [SIMPLE_EDGE]
                                          SHUFFLE [RS_359]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_860] (rows=1 width=120)
                                              Conds:RS_356._col1=RS_357._col0(Inner),Output:["_col1","_col2","_col3"]
                                            <-Reducer 54 [SIMPLE_EDGE]
                                              SHUFFLE [RS_356]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_852] (rows=7790806 width=98)
                                                  Conds:RS_1138._col0=RS_1089._col0(Inner),Output:["_col1","_col2","_col3"]
                                                <-Map 53 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1089]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1087] (rows=50 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_1086] (rows=50 width=12)
                                                        predicate:((d_moy = 11) and (d_year = 2000))
                                                        TableScan [TS_85] (rows=73049 width=12)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                <-Map 91 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1138]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1137] (rows=286549727 width=123)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1136] (rows=286549727 width=123)
                                                        predicate:cs_sold_date_sk is not null
                                                        TableScan [TS_270] (rows=287989836 width=123)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                            <-Reducer 72 [SIMPLE_EDGE]
                                              SHUFFLE [RS_357]
                                                PartitionCols:_col0
                                                Merge Join Operator [MERGEJOIN_859] (rows=724 width=4)
                                                  Conds:RS_1117._col1, _col2, _col3=RS_1142._col0, _col1, _col2(Inner),Output:["_col0"]
                                                <-Map 90 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1117]
                                                    PartitionCols:_col1, _col2, _col3
                                                    Select Operator [SEL_1110] (rows=458612 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1101] (rows=458612 width=15)
                                                        predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                         Please refer to the previous TableScan [TS_163]
                                                <-Reducer 71 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1142]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1141] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1140] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1139] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 70 [SIMPLE_EDGE]
                                                          <-Reducer 69 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1212]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1211] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1210] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 64 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_296]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_107] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_844] (rows=14628613 width=11)
                                                                        Conds:RS_103._col1=RS_1114._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 90 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1114]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1106] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1097] (rows=458612 width=15)
                                                                              predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                                               Please refer to the previous TableScan [TS_163]
                                                                      <-Reducer 63 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_103]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_843] (rows=14736682 width=4)
                                                                            Conds:RS_1206._col0=RS_1065._col0(Inner),Output:["_col1"]
                                                                          <-Map 77 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1065]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1064]
                                                                          <-Map 62 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1206]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1205] (rows=550076554 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1204] (rows=550076554 width=7)
                                                                                  predicate:ss_sold_date_sk is not null
                                                                                  TableScan [TS_91] (rows=575995635 width=7)
                                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                          <-Reducer 81 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1224]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1223] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1222] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 79 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_316]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_127] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_846] (rows=7620440 width=11)
                                                                        Conds:RS_123._col1=RS_1115._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 90 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1115]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1107] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1098] (rows=458612 width=15)
                                                                              predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                                               Please refer to the previous TableScan [TS_163]
                                                                      <-Reducer 78 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_123]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_845] (rows=7676736 width=4)
                                                                            Conds:RS_1218._col0=RS_1066._col0(Inner),Output:["_col1"]
                                                                          <-Map 77 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1066]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1064]
                                                                          <-Map 88 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1218]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1217] (rows=286549727 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1216] (rows=286549727 width=7)
                                                                                  predicate:cs_sold_date_sk is not null
                                                                                  TableScan [TS_111] (rows=287989836 width=7)
                                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                          <-Reducer 86 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1236]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1235] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1234] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 84 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_337]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                    Group By Operator [GBY_148] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                      Merge Join Operator [MERGEJOIN_848] (rows=3828623 width=11)
                                                                        Conds:RS_144._col1=RS_1116._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                      <-Map 90 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_1116]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_1108] (rows=458612 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            Filter Operator [FIL_1099] (rows=458612 width=15)
                                                                              predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                                               Please refer to the previous TableScan [TS_163]
                                                                      <-Reducer 83 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_144]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_847] (rows=3856907 width=4)
                                                                            Conds:RS_1230._col0=RS_1067._col0(Inner),Output:["_col1"]
                                                                          <-Map 77 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1067]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1064]
                                                                          <-Map 89 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1230]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1229] (rows=143966864 width=7)
                                                                                Output:["_col0","_col1"]
                                                                                Filter Operator [FIL_1228] (rows=143966864 width=7)
                                                                                  predicate:ws_sold_date_sk is not null
                                                                                  TableScan [TS_132] (rows=144002668 width=7)
                                                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                  <-Reducer 19 [CONTAINS]
                    Reduce Output Operator [RS_931]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_930] (rows=7 width=217)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_928] (rows=1 width=219)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_927] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_926] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 18 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_560]
                                Merge Join Operator [MERGEJOIN_894] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1150]
                                    Select Operator [SEL_1149] (rows=1 width=8)
                                      Filter Operator [FIL_1148] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1147] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1146] (rows=1 width=8)
                                            Group By Operator [GBY_1145] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 16 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 15 [CONTAINS]
                                                Reduce Output Operator [RS_925]
                                                  Group By Operator [GBY_924] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_923] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_921] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_920] (rows=14736682 width=0)
                                                          Conds:RS_1062._col0=RS_1072._col0(Inner),Output:["_col1"]
                                                        <-Map 77 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1072]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1064]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1062]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1059]
                                              <-Reducer 23 [CONTAINS]
                                                Reduce Output Operator [RS_949]
                                                  Group By Operator [GBY_948] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_947] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_945] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_944] (rows=7676736 width=3)
                                                          Conds:RS_1167._col0=RS_1174._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1174]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1169]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1167]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1164]
                                              <-Reducer 37 [CONTAINS]
                                                Reduce Output Operator [RS_985]
                                                  Group By Operator [GBY_984] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_983] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_981] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_980] (rows=3856907 width=3)
                                                          Conds:RS_1185._col0=RS_1192._col0(Inner),Output:["_col1"]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1192]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1187]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1185]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1182]
                                <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1153]
                                    Select Operator [SEL_1152] (rows=1 width=112)
                                      Output:["_col0"]
                                      Group By Operator [GBY_1151] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 32 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 31 [CONTAINS]
                                          Reduce Output Operator [RS_967]
                                            Group By Operator [GBY_966] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_965] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_963] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_962] (rows=7676736 width=94)
                                                    Conds:RS_1180._col0=RS_1175._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1175]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1169]
                                                  <-Map 46 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1180]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1177]
                                        <-Reducer 41 [CONTAINS]
                                          Reduce Output Operator [RS_1003]
                                            Group By Operator [GBY_1002] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1001] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_999] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_998] (rows=3856907 width=114)
                                                    Conds:RS_1198._col0=RS_1193._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1193]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1187]
                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1198]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1195]
                                        <-Reducer 45 [CONTAINS]
                                          Reduce Output Operator [RS_1021]
                                            Group By Operator [GBY_1020] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1019] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1017] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1016] (rows=14736682 width=0)
                                                    Conds:RS_1203._col0=RS_1073._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1073]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1064]
                                                  <-Map 42 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1203]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1200]
                            <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1162]
                                Group By Operator [GBY_1161] (rows=1 width=132)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 60 [SIMPLE_EDGE]
                                  SHUFFLE [RS_554]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_553] (rows=1 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                      Select Operator [SEL_551] (rows=1 width=128)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Merge Join Operator [MERGEJOIN_871] (rows=1 width=128)
                                          Conds:RS_548._col1=RS_1111._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                        <-Map 90 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_1111]
                                            PartitionCols:_col0
                                            Select Operator [SEL_1102] (rows=462000 width=15)
                                              Output:["_col0","_col1","_col2","_col3"]
                                               Please refer to the previous TableScan [TS_163]
                                        <-Reducer 59 [SIMPLE_EDGE]
                                          SHUFFLE [RS_548]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_870] (rows=1 width=120)
                                              Conds:RS_545._col1=RS_546._col0(Inner),Output:["_col1","_col2","_col3"]
                                            <-Reducer 58 [SIMPLE_EDGE]
                                              SHUFFLE [RS_545]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_862] (rows=3942084 width=118)
                                                  Conds:RS_1156._col0=RS_1090._col0(Inner),Output:["_col1","_col2","_col3"]
                                                <-Map 53 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1090]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1087]
                                                <-Map 92 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1156]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1155] (rows=143966864 width=123)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1154] (rows=143966864 width=123)
                                                        predicate:ws_sold_date_sk is not null
                                                        TableScan [TS_459] (rows=144002668 width=123)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                            <-Reducer 76 [SIMPLE_EDGE]
                                              SHUFFLE [RS_546]
                                                PartitionCols:_col0
                                                Merge Join Operator [MERGEJOIN_869] (rows=724 width=4)
                                                  Conds:RS_1118._col1, _col2, _col3=RS_1160._col0, _col1, _col2(Inner),Output:["_col0"]
                                                <-Map 90 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1118]
                                                    PartitionCols:_col1, _col2, _col3
                                                    Select Operator [SEL_1112] (rows=458612 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1103] (rows=458612 width=15)
                                                        predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                         Please refer to the previous TableScan [TS_163]
                                                <-Reducer 75 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1160]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1159] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1158] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1157] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 74 [SIMPLE_EDGE]
                                                          <-Reducer 73 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1215]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1214] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1213] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 64 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_485]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_107]
                                                          <-Reducer 82 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1227]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1226] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1225] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 79 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_505]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_127]
                                                          <-Reducer 87 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1239]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1238] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1237] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 84 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_526]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_148]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_907]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_906] (rows=7 width=217)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_904] (rows=1 width=221)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_903] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_902] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_183]
                                Merge Join Operator [MERGEJOIN_890] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1082]
                                    Select Operator [SEL_1081] (rows=1 width=112)
                                      Output:["_col0"]
                                      Group By Operator [GBY_1080] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 26 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 25 [CONTAINS]
                                          Reduce Output Operator [RS_955]
                                            Group By Operator [GBY_954] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_953] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_951] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_950] (rows=7676736 width=94)
                                                    Conds:RS_1178._col0=RS_1171._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1171]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1169]
                                                  <-Map 46 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1178]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1177]
                                        <-Reducer 39 [CONTAINS]
                                          Reduce Output Operator [RS_991]
                                            Group By Operator [GBY_990] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_989] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_987] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_986] (rows=3856907 width=114)
                                                    Conds:RS_1196._col0=RS_1189._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1189]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1187]
                                                  <-Map 47 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1196]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1195]
                                        <-Reducer 43 [CONTAINS]
                                          Reduce Output Operator [RS_1009]
                                            Group By Operator [GBY_1008] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1007] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1005] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1004] (rows=14736682 width=0)
                                                    Conds:RS_1201._col0=RS_1069._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1069]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1064]
                                                  <-Map 42 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1201]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1200]
                                <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1079]
                                    Select Operator [SEL_1078] (rows=1 width=8)
                                      Filter Operator [FIL_1077] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1076] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1075] (rows=1 width=8)
                                            Group By Operator [GBY_1074] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 2 [CONTAINS]
                                                Reduce Output Operator [RS_901]
                                                  Group By Operator [GBY_900] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_899] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_897] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_896] (rows=14736682 width=0)
                                                          Conds:RS_1060._col0=RS_1068._col0(Inner),Output:["_col1"]
                                                        <-Map 77 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1068]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1064]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1060]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1059]
                                              <-Reducer 21 [CONTAINS]
                                                Reduce Output Operator [RS_937]
                                                  Group By Operator [GBY_936] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_935] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_933] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_932] (rows=7676736 width=3)
                                                          Conds:RS_1165._col0=RS_1170._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1170]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1169]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1165]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1164]
                                              <-Reducer 35 [CONTAINS]
                                                Reduce Output Operator [RS_973]
                                                  Group By Operator [GBY_972] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_971] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_969] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_968] (rows=3856907 width=3)
                                                          Conds:RS_1183._col0=RS_1188._col0(Inner),Output:["_col1"]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1188]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1187]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1183]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1182]
                            <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1120]
                                Group By Operator [GBY_1119] (rows=1 width=132)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 51 [SIMPLE_EDGE]
                                  SHUFFLE [RS_177]
                                    PartitionCols:_col0, _col1, _col2
                                    Group By Operator [GBY_176] (rows=1 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                      Select Operator [SEL_174] (rows=1 width=128)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Merge Join Operator [MERGEJOIN_851] (rows=1 width=128)
                                          Conds:RS_171._col1=RS_1104._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                        <-Map 90 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_1104]
                                            PartitionCols:_col0
                                            Select Operator [SEL_1095] (rows=462000 width=15)
                                              Output:["_col0","_col1","_col2","_col3"]
                                               Please refer to the previous TableScan [TS_163]
                                        <-Reducer 50 [SIMPLE_EDGE]
                                          SHUFFLE [RS_171]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_850] (rows=1 width=120)
                                              Conds:RS_168._col1=RS_169._col0(Inner),Output:["_col1","_col2","_col3"]
                                            <-Reducer 49 [SIMPLE_EDGE]
                                              SHUFFLE [RS_168]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_842] (rows=15062131 width=4)
                                                  Conds:RS_1085._col0=RS_1088._col0(Inner),Output:["_col1","_col2","_col3"]
                                                <-Map 53 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1088]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1087]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1085]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1084] (rows=550076554 width=118)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1083] (rows=550076554 width=118)
                                                        predicate:ss_sold_date_sk is not null
                                                        TableScan [TS_82] (rows=575995635 width=118)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                            <-Reducer 68 [SIMPLE_EDGE]
                                              SHUFFLE [RS_169]
                                                PartitionCols:_col0
                                                Merge Join Operator [MERGEJOIN_849] (rows=724 width=4)
                                                  Conds:RS_1113._col1, _col2, _col3=RS_1094._col0, _col1, _col2(Inner),Output:["_col0"]
                                                <-Map 90 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1113]
                                                    PartitionCols:_col1, _col2, _col3
                                                    Select Operator [SEL_1105] (rows=458612 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1096] (rows=458612 width=15)
                                                        predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                         Please refer to the previous TableScan [TS_163]
                                                <-Reducer 67 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1094]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Select Operator [SEL_1093] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1092] (rows=1 width=20)
                                                        predicate:(_col3 = 3L)
                                                        Group By Operator [GBY_1091] (rows=121728 width=19)
                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                        <-Union 66 [SIMPLE_EDGE]
                                                          <-Reducer 65 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1209]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1208] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1207] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 64 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_108]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_107]
                                                          <-Reducer 80 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1221]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1220] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1219] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 79 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_128]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_127]
                                                          <-Reducer 85 [CONTAINS] vectorized
                                                            Reduce Output Operator [RS_1233]
                                                              PartitionCols:_col0, _col1, _col2
                                                              Group By Operator [GBY_1232] (rows=121728 width=19)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                Group By Operator [GBY_1231] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                <-Reducer 84 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_149]
                                                                    PartitionCols:_col0, _col1, _col2
                                                                     Please refer to the previous Group By Operator [GBY_148]

