PREHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 12 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 15 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 16 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_126]
        Limit [LIM_125] (rows=100 width=496)
          Number of rows:100
          Select Operator [SEL_124] (rows=4156223234 width=496)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_123]
              Group By Operator [GBY_122] (rows=4156223234 width=496)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_47]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_46] (rows=4156223234 width=496)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col10)","sum(_col16)","sum(_col3)"],keys:_col22, _col23, _col19, _col20
                    Merge Join Operator [MERGEJOIN_99] (rows=4156223234 width=483)
                      Conds:RS_42._col6=RS_121._col0(Inner),Output:["_col3","_col10","_col16","_col19","_col20","_col22","_col23"]
                    <-Map 16 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_121]
                        PartitionCols:_col0
                        Select Operator [SEL_120] (rows=462000 width=288)
                          Output:["_col0","_col1","_col2"]
                          TableScan [TS_31] (rows=462000 width=288)
                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                    <-Reducer 4 [SIMPLE_EDGE]
                      SHUFFLE [RS_42]
                        PartitionCols:_col6
                        Merge Join Operator [MERGEJOIN_98] (rows=4156223234 width=203)
                          Conds:RS_39._col8=RS_119._col0(Inner),Output:["_col3","_col6","_col10","_col16","_col19","_col20"]
                        <-Map 15 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_119]
                            PartitionCols:_col0
                            Select Operator [SEL_118] (rows=1704 width=192)
                              Output:["_col0","_col1","_col2"]
                              TableScan [TS_29] (rows=1704 width=192)
                                default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_39]
                            PartitionCols:_col8
                            Merge Join Operator [MERGEJOIN_97] (rows=4156223234 width=19)
                              Conds:RS_36._col1, _col2=RS_37._col9, _col8(Inner),Output:["_col3","_col6","_col8","_col10","_col16"]
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_37]
                                PartitionCols:_col9, _col8
                                Merge Join Operator [MERGEJOIN_96] (rows=21091879 width=18)
                                  Conds:RS_25._col2, _col1, _col4=RS_26._col2, _col1, _col3(Inner),Output:["_col1","_col3","_col5","_col8","_col9","_col11"]
                                <-Reducer 10 [SIMPLE_EDGE]
                                  SHUFFLE [RS_25]
                                    PartitionCols:_col2, _col1, _col4
                                    Merge Join Operator [MERGEJOIN_94] (rows=13737330 width=8)
                                      Conds:RS_108._col0=RS_113._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Map 12 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_113]
                                        PartitionCols:_col0
                                        Select Operator [SEL_111] (rows=50 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_109] (rows=50 width=12)
                                            predicate:((d_moy = 4) and (d_year = 1999))
                                            TableScan [TS_9] (rows=73049 width=12)
                                              default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_108]
                                        PartitionCols:_col0
                                        Select Operator [SEL_107] (rows=501694138 width=23)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_106] (rows=501694138 width=23)
                                            predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                            TableScan [TS_6] (rows=575995635 width=23)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_quantity"]
                                <-Reducer 13 [SIMPLE_EDGE]
                                  SHUFFLE [RS_26]
                                    PartitionCols:_col2, _col1, _col3
                                    Merge Join Operator [MERGEJOIN_95] (rows=5384572 width=13)
                                      Conds:RS_117._col0=RS_114._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                    <-Map 12 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_114]
                                        PartitionCols:_col0
                                        Select Operator [SEL_112] (rows=201 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_110] (rows=201 width=12)
                                            predicate:((d_year = 1999) and d_moy BETWEEN 4 AND 7)
                                             Please refer to the previous TableScan [TS_9]
                                    <-Map 14 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_117]
                                        PartitionCols:_col0
                                        Select Operator [SEL_116] (rows=53632139 width=19)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                          Filter Operator [FIL_115] (rows=53632139 width=19)
                                            predicate:(sr_customer_sk is not null and sr_returned_date_sk is not null)
                                            TableScan [TS_12] (rows=57591150 width=19)
                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_return_quantity"]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_36]
                                PartitionCols:_col1, _col2
                                Merge Join Operator [MERGEJOIN_93] (rows=7638375 width=10)
                                  Conds:RS_102._col0=RS_105._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_102]
                                    PartitionCols:_col0
                                    Select Operator [SEL_101] (rows=285117831 width=15)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_100] (rows=285117831 width=15)
                                        predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                        TableScan [TS_0] (rows=287989836 width=15)
                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_105]
                                    PartitionCols:_col0
                                    Select Operator [SEL_104] (rows=1957 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_103] (rows=1957 width=8)
                                        predicate:(d_year) IN (1999, 2000, 2001)
                                        TableScan [TS_3] (rows=73049 width=8)
                                          default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]

