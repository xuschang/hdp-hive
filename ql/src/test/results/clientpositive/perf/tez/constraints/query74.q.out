PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 14 <- Map 20 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 12 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 17 <- Map 20 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 3 <- Map 20 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 15 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 9 <- Map 20 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_205]
        Limit [LIM_204] (rows=100 width=280)
          Number of rows:100
          Select Operator [SEL_203] (rows=4082697 width=280)
            Output:["_col0","_col1","_col2"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_89]
              Select Operator [SEL_88] (rows=4082697 width=280)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_87] (rows=4082697 width=728)
                  predicate:((_col9 / _col1) > (_col7 / _col3))
                  Merge Join Operator [MERGEJOIN_164] (rows=12248093 width=728)
                    Conds:RS_84._col2=RS_202._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col9"]
                  <-Reducer 15 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_202]
                      PartitionCols:_col0
                      Select Operator [SEL_201] (rows=51391963 width=212)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_200] (rows=51391963 width=392)
                          Output:["_col0","_col1","_col2","_col3"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                        <-Reducer 14 [SIMPLE_EDGE]
                          SHUFFLE [RS_75]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_74] (rows=51391963 width=392)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["max(_col2)"],keys:_col5, _col6, _col7
                              Merge Join Operator [MERGEJOIN_161] (rows=51391963 width=391)
                                Conds:RS_70._col1=RS_180._col0(Inner),Output:["_col2","_col5","_col6","_col7"]
                              <-Map 20 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_180]
                                  PartitionCols:_col0
                                  Select Operator [SEL_179] (rows=80000000 width=284)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    TableScan [TS_65] (rows=80000000 width=284)
                                      default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name"]
                              <-Reducer 13 [SIMPLE_EDGE]
                                SHUFFLE [RS_70]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_160] (rows=51391963 width=115)
                                    Conds:RS_193._col0=RS_175._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 19 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_175]
                                      PartitionCols:_col0
                                      Select Operator [SEL_172] (rows=652 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_169] (rows=652 width=8)
                                          predicate:((d_year = 2002) and (d_year) IN (2001, 2002))
                                          TableScan [TS_62] (rows=73049 width=8)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                  <-Map 12 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_193]
                                      PartitionCols:_col0
                                      Select Operator [SEL_192] (rows=143930993 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_191] (rows=143930993 width=119)
                                          predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                          TableScan [TS_59] (rows=144002668 width=119)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                  <-Reducer 5 [SIMPLE_EDGE]
                    SHUFFLE [RS_84]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_163] (rows=10242506 width=716)
                        Conds:RS_81._col2=RS_185._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                      <-Reducer 11 [SIMPLE_EDGE]
                        SHUFFLE [RS_81]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_162] (rows=8565327 width=324)
                            Conds:RS_199._col0=RS_190._col0(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 10 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_190]
                              PartitionCols:_col0
                              Select Operator [SEL_189] (rows=13333333 width=212)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_188] (rows=13333333 width=212)
                                  predicate:((_col3 > 0) and _col3 is not null is true)
                                  Select Operator [SEL_187] (rows=80000000 width=212)
                                    Output:["_col0","_col3"]
                                    Group By Operator [GBY_186] (rows=80000000 width=392)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 9 [SIMPLE_EDGE]
                                      SHUFFLE [RS_36]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_35] (rows=80000000 width=392)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["max(_col2)"],keys:_col5, _col6, _col7
                                          Merge Join Operator [MERGEJOIN_157] (rows=187573258 width=377)
                                            Conds:RS_31._col1=RS_183._col0(Inner),Output:["_col2","_col5","_col6","_col7"]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_183]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_179]
                                          <-Reducer 8 [SIMPLE_EDGE]
                                            SHUFFLE [RS_31]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_156] (rows=187573258 width=101)
                                                Conds:RS_168._col0=RS_178._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 19 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_178]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_174] (rows=652 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_171] (rows=652 width=8)
                                                      predicate:((d_year = 2001) and (d_year) IN (2001, 2002))
                                                       Please refer to the previous TableScan [TS_62]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_168]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_166] (rows=525327388 width=114)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_165] (rows=525327388 width=114)
                                                      predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                      TableScan [TS_40] (rows=575995635 width=114)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                          <-Reducer 18 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_199]
                              PartitionCols:_col0
                              Select Operator [SEL_198] (rows=8565327 width=212)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_197] (rows=8565327 width=212)
                                  predicate:((_col3 > 0) and _col3 is not null is true)
                                  Select Operator [SEL_196] (rows=51391963 width=212)
                                    Output:["_col0","_col3"]
                                    Group By Operator [GBY_195] (rows=51391963 width=392)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 17 [SIMPLE_EDGE]
                                      SHUFFLE [RS_16]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_15] (rows=51391963 width=392)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["max(_col2)"],keys:_col5, _col6, _col7
                                          Merge Join Operator [MERGEJOIN_155] (rows=51391963 width=391)
                                            Conds:RS_11._col1=RS_182._col0(Inner),Output:["_col2","_col5","_col6","_col7"]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_182]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_179]
                                          <-Reducer 16 [SIMPLE_EDGE]
                                            SHUFFLE [RS_11]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_154] (rows=51391963 width=115)
                                                Conds:RS_194._col0=RS_177._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 19 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_177]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_173] (rows=652 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_170] (rows=652 width=8)
                                                      predicate:((d_year = 2001) and (d_year) IN (2001, 2002))
                                                       Please refer to the previous TableScan [TS_62]
                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_194]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_192]
                      <-Reducer 4 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_185]
                          PartitionCols:_col0
                          Group By Operator [GBY_184] (rows=80000000 width=392)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_56]
                              PartitionCols:_col0, _col1, _col2
                              Group By Operator [GBY_55] (rows=80000000 width=392)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["max(_col2)"],keys:_col5, _col6, _col7
                                Merge Join Operator [MERGEJOIN_159] (rows=187573258 width=377)
                                  Conds:RS_51._col1=RS_181._col0(Inner),Output:["_col2","_col5","_col6","_col7"]
                                <-Map 20 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_181]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_179]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_51]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_158] (rows=187573258 width=101)
                                      Conds:RS_167._col0=RS_176._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 19 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_176]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_172]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_167]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_166]

