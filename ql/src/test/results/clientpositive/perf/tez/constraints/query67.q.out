PREHOOK: query: explain
select  *
from (select i_category
            ,i_class
            ,i_brand
            ,i_product_name
            ,d_year
            ,d_qoy
            ,d_moy
            ,s_store_id
            ,sumsales
            ,rank() over (partition by i_category order by sumsales desc) rk
      from (select i_category
                  ,i_class
                  ,i_brand
                  ,i_product_name
                  ,d_year
                  ,d_qoy
                  ,d_moy
                  ,s_store_id
                  ,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
            from store_sales
                ,date_dim
                ,store
                ,item
       where  ss_sold_date_sk=d_date_sk
          and ss_item_sk=i_item_sk
          and ss_store_sk = s_store_sk
          and d_month_seq between 1212 and 1212+11
       group by  rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id))dw1) dw2
where rk <= 100
order by i_category
        ,i_class
        ,i_brand
        ,i_product_name
        ,d_year
        ,d_qoy
        ,d_moy
        ,s_store_id
        ,sumsales
        ,rk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  *
from (select i_category
            ,i_class
            ,i_brand
            ,i_product_name
            ,d_year
            ,d_qoy
            ,d_moy
            ,s_store_id
            ,sumsales
            ,rank() over (partition by i_category order by sumsales desc) rk
      from (select i_category
                  ,i_class
                  ,i_brand
                  ,i_product_name
                  ,d_year
                  ,d_qoy
                  ,d_moy
                  ,s_store_id
                  ,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
            from store_sales
                ,date_dim
                ,store
                ,item
       where  ss_sold_date_sk=d_date_sk
          and ss_item_sk=i_item_sk
          and ss_store_sk = s_store_sk
          and d_month_seq between 1212 and 1212+11
       group by  rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id))dw1) dw2
where rk <= 100
order by i_category
        ,i_class
        ,i_brand
        ,i_product_name
        ,d_year
        ,d_qoy
        ,d_moy
        ,s_store_id
        ,sumsales
        ,rk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_72]
        Limit [LIM_71] (rows=100 width=617)
          Number of rows:100
          Select Operator [SEL_70] (rows=273593580 width=617)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_69]
              Select Operator [SEL_68] (rows=273593580 width=617)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                Filter Operator [FIL_67] (rows=273593580 width=613)
                  predicate:(rank_window_0 <= 100)
                  PTF Operator [PTF_66] (rows=820780740 width=613)
                    Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col8 DESC NULLS LAST","partition by:":"_col6"}]
                    Select Operator [SEL_65] (rows=820780740 width=613)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                    <-Reducer 5 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_64]
                        PartitionCols:_col6
                        Select Operator [SEL_63] (rows=820780740 width=613)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                          Group By Operator [GBY_62] (rows=820780740 width=621)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8
                          <-Reducer 4 [SIMPLE_EDGE]
                            SHUFFLE [RS_21]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8
                              Group By Operator [GBY_20] (rows=820780740 width=621)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(_col3)"],keys:_col5, _col6, _col7, _col9, _col11, _col12, _col13, _col14, 0L
                                Merge Join Operator [MERGEJOIN_51] (rows=91197860 width=613)
                                  Conds:RS_16._col1=RS_61._col0(Inner),Output:["_col3","_col5","_col6","_col7","_col9","_col11","_col12","_col13","_col14"]
                                <-Map 10 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_61]
                                    PartitionCols:_col0
                                    Select Operator [SEL_60] (rows=462000 width=393)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      TableScan [TS_8] (rows=462000 width=393)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand","i_class","i_category","i_product_name"]
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_16]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_50] (rows=91197860 width=228)
                                      Conds:RS_13._col2=RS_59._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col9"]
                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_59]
                                        PartitionCols:_col0
                                        Select Operator [SEL_58] (rows=1704 width=104)
                                          Output:["_col0","_col1"]
                                          TableScan [TS_6] (rows=1704 width=104)
                                            default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id"]
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_13]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_49] (rows=91197860 width=130)
                                          Conds:RS_54._col0=RS_57._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_54]
                                            PartitionCols:_col0
                                            Select Operator [SEL_53] (rows=525329897 width=123)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_52] (rows=525329897 width=122)
                                                predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                                TableScan [TS_0] (rows=575995635 width=122)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_quantity","ss_sales_price"]
                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_57]
                                            PartitionCols:_col0
                                            Select Operator [SEL_56] (rows=317 width=16)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_55] (rows=317 width=20)
                                                predicate:d_month_seq BETWEEN 1212 AND 1223
                                                TableScan [TS_3] (rows=73049 width=20)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq","d_year","d_moy","d_qoy"]

