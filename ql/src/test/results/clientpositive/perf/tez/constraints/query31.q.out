PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 12 <- Map 1 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 13 <- Map 26 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 17 <- Map 26 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 20 <- Map 15 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 21 <- Map 26 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 15 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 24 <- Map 26 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 3 <- Map 26 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 19 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 25 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 9 <- Map 26 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7
      File Output Operator [FS_143]
        Select Operator [SEL_142] (rows=24 width=550)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_141] (rows=24 width=770)
            predicate:((_col5 / _col1) > (_col11 / _col7))
            Merge Join Operator [MERGEJOIN_262] (rows=73 width=770)
              Conds:RS_138._col6=RS_314._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col9","_col11"]
            <-Reducer 25 [SIMPLE_EDGE] vectorized
              SHUFFLE [RS_314]
                PartitionCols:_col0
                Group By Operator [GBY_313] (rows=1605 width=210)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Reducer 24 [SIMPLE_EDGE]
                  SHUFFLE [RS_125]
                    PartitionCols:_col0
                    Group By Operator [GBY_124] (rows=33705 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                      Merge Join Operator [MERGEJOIN_257] (rows=37399561 width=139)
                        Conds:RS_120._col1=RS_293._col0(Inner),Output:["_col2","_col5"]
                      <-Map 26 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_293]
                          PartitionCols:_col0
                          Select Operator [SEL_287] (rows=40000000 width=102)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_286] (rows=40000000 width=102)
                              predicate:ca_county is not null
                              TableScan [TS_48] (rows=40000000 width=102)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                      <-Reducer 23 [SIMPLE_EDGE]
                        SHUFFLE [RS_120]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_256] (rows=37399561 width=42)
                            Conds:RS_306._col0=RS_285._col0(Inner),Output:["_col1","_col2"]
                          <-Map 15 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_285]
                              PartitionCols:_col0
                              Select Operator [SEL_279] (rows=130 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_273] (rows=130 width=12)
                                  predicate:((d_qoy = 3) and (d_year = 2000))
                                  TableScan [TS_45] (rows=73049 width=12)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                          <-Map 27 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_306]
                              PartitionCols:_col0
                              Select Operator [SEL_303] (rows=525327191 width=114)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_302] (rows=525327191 width=114)
                                  predicate:(ss_addr_sk is not null and ss_sold_date_sk is not null)
                                  TableScan [TS_62] (rows=575995635 width=114)
                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
            <-Reducer 6 [SIMPLE_EDGE]
              SHUFFLE [RS_138]
                PartitionCols:_col6
                Filter Operator [FIL_137] (rows=73 width=658)
                  predicate:((_col1 / _col3) > (_col7 / _col9))
                  Merge Join Operator [MERGEJOIN_261] (rows=220 width=658)
                    Conds:RS_134._col2=RS_135._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col9"]
                  <-Reducer 19 [SIMPLE_EDGE]
                    SHUFFLE [RS_135]
                      PartitionCols:_col0
                      Merge Join Operator [MERGEJOIN_260] (rows=802 width=322)
                        Conds:RS_309._col0=RS_312._col0(Inner),Output:["_col0","_col1","_col3"]
                      <-Reducer 18 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_309]
                          PartitionCols:_col0
                          Filter Operator [FIL_308] (rows=802 width=210)
                            predicate:(_col1 > 0) is true
                            Group By Operator [GBY_307] (rows=1605 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 17 [SIMPLE_EDGE]
                              SHUFFLE [RS_79]
                                PartitionCols:_col0
                                Group By Operator [GBY_78] (rows=33705 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_253] (rows=37399561 width=139)
                                    Conds:RS_74._col1=RS_291._col0(Inner),Output:["_col2","_col5"]
                                  <-Map 26 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_291]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_287]
                                  <-Reducer 16 [SIMPLE_EDGE]
                                    SHUFFLE [RS_74]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_252] (rows=37399561 width=42)
                                        Conds:RS_304._col0=RS_283._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_283]
                                          PartitionCols:_col0
                                          Select Operator [SEL_277] (rows=130 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_271] (rows=130 width=12)
                                              predicate:((d_qoy = 2) and (d_year = 2000))
                                               Please refer to the previous TableScan [TS_45]
                                      <-Map 27 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_304]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_303]
                      <-Reducer 22 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_312]
                          PartitionCols:_col0
                          Filter Operator [FIL_311] (rows=802 width=210)
                            predicate:(_col1 > 0) is true
                            Group By Operator [GBY_310] (rows=1605 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 21 [SIMPLE_EDGE]
                              SHUFFLE [RS_100]
                                PartitionCols:_col0
                                Group By Operator [GBY_99] (rows=33705 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_255] (rows=37399561 width=139)
                                    Conds:RS_95._col1=RS_292._col0(Inner),Output:["_col2","_col5"]
                                  <-Map 26 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_292]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_287]
                                  <-Reducer 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_95]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_254] (rows=37399561 width=42)
                                        Conds:RS_305._col0=RS_284._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_284]
                                          PartitionCols:_col0
                                          Select Operator [SEL_278] (rows=130 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_272] (rows=130 width=12)
                                              predicate:((d_qoy = 1) and (d_year = 2000))
                                               Please refer to the previous TableScan [TS_45]
                                      <-Map 27 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_305]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_303]
                  <-Reducer 5 [SIMPLE_EDGE]
                    SHUFFLE [RS_134]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_259] (rows=220 width=434)
                        Conds:RS_131._col2=RS_295._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                      <-Reducer 11 [SIMPLE_EDGE]
                        SHUFFLE [RS_131]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_258] (rows=220 width=322)
                            Conds:RS_298._col0=RS_301._col0(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 10 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_298]
                              PartitionCols:_col0
                              Filter Operator [FIL_297] (rows=220 width=210)
                                predicate:(_col1 > 0) is true
                                Group By Operator [GBY_296] (rows=440 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 9 [SIMPLE_EDGE]
                                  SHUFFLE [RS_17]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_16] (rows=3960 width=210)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                      Merge Join Operator [MERGEJOIN_247] (rows=10246882 width=209)
                                        Conds:RS_12._col1=RS_289._col0(Inner),Output:["_col2","_col5"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_289]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_287]
                                      <-Reducer 8 [SIMPLE_EDGE]
                                        SHUFFLE [RS_12]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_246] (rows=10246882 width=115)
                                            Conds:RS_266._col0=RS_281._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_281]
                                              PartitionCols:_col0
                                              Select Operator [SEL_275] (rows=130 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_269] (rows=130 width=12)
                                                  predicate:((d_qoy = 2) and (d_year = 2000))
                                                   Please refer to the previous TableScan [TS_45]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_266]
                                              PartitionCols:_col0
                                              Select Operator [SEL_264] (rows=143931246 width=119)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_263] (rows=143931246 width=119)
                                                  predicate:(ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                                  TableScan [TS_42] (rows=144002668 width=119)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                          <-Reducer 14 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_301]
                              PartitionCols:_col0
                              Filter Operator [FIL_300] (rows=220 width=210)
                                predicate:(_col1 > 0) is true
                                Group By Operator [GBY_299] (rows=440 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 13 [SIMPLE_EDGE]
                                  SHUFFLE [RS_38]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_37] (rows=3960 width=210)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                      Merge Join Operator [MERGEJOIN_249] (rows=10246882 width=209)
                                        Conds:RS_33._col1=RS_290._col0(Inner),Output:["_col2","_col5"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_290]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_287]
                                      <-Reducer 12 [SIMPLE_EDGE]
                                        SHUFFLE [RS_33]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_248] (rows=10246882 width=115)
                                            Conds:RS_267._col0=RS_282._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_282]
                                              PartitionCols:_col0
                                              Select Operator [SEL_276] (rows=130 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_270] (rows=130 width=12)
                                                  predicate:((d_qoy = 1) and (d_year = 2000))
                                                   Please refer to the previous TableScan [TS_45]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_267]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_264]
                      <-Reducer 4 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_295]
                          PartitionCols:_col0
                          Group By Operator [GBY_294] (rows=440 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_59]
                              PartitionCols:_col0
                              Group By Operator [GBY_58] (rows=3960 width=210)
                                Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                Merge Join Operator [MERGEJOIN_251] (rows=10246882 width=209)
                                  Conds:RS_54._col1=RS_288._col0(Inner),Output:["_col2","_col5"]
                                <-Map 26 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_288]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_287]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_54]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_250] (rows=10246882 width=115)
                                      Conds:RS_265._col0=RS_280._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_280]
                                        PartitionCols:_col0
                                        Select Operator [SEL_274] (rows=130 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_268] (rows=130 width=12)
                                            predicate:((d_qoy = 3) and (d_year = 2000))
                                             Please refer to the previous TableScan [TS_45]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_265]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_264]

