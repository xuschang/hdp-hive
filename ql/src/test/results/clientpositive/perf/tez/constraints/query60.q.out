PREHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 2 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Map 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 16 <- Map 22 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE)
Reducer 19 <- Map 22 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 20 <- Map 17 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 21 <- Map 22 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 3 <- Reducer 16 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 19 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE), Union 5 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_222]
        Limit [LIM_221] (rows=100 width=212)
          Number of rows:100
          Select Operator [SEL_220] (rows=1717 width=212)
            Output:["_col0","_col1"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_219]
              Group By Operator [GBY_218] (rows=1717 width=212)
                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
              <-Union 5 [SIMPLE_EDGE]
                <-Reducer 11 [CONTAINS] vectorized
                  Reduce Output Operator [RS_234]
                    PartitionCols:_col0
                    Group By Operator [GBY_233] (rows=1717 width=212)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Group By Operator [GBY_232] (rows=1717 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 10 [SIMPLE_EDGE]
                        SHUFFLE [RS_106]
                          PartitionCols:_col0
                          Group By Operator [GBY_105] (rows=1717 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                            Merge Join Operator [MERGEJOIN_181] (rows=379339 width=201)
                              Conds:RS_101._col0=RS_102._col2(Inner),Output:["_col1","_col7"]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_101]
                                PartitionCols:_col0
                                Merge Join Operator [MERGEJOIN_170] (rows=34340 width=104)
                                  Conds:RS_195._col1=RS_201._col0(Inner),Output:["_col0","_col1"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_195]
                                    PartitionCols:_col1
                                    Select Operator [SEL_194] (rows=462000 width=104)
                                      Output:["_col0","_col1"]
                                      TableScan [TS_0] (rows=462000 width=104)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id"]
                                <-Reducer 13 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_201]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_200] (rows=23100 width=100)
                                      Output:["_col0"],keys:KEY._col0
                                    <-Map 12 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_199]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_198] (rows=23100 width=100)
                                          Output:["_col0"],keys:i_item_id
                                          Select Operator [SEL_197] (rows=46200 width=190)
                                            Output:["i_item_id"]
                                            Filter Operator [FIL_196] (rows=46200 width=190)
                                              predicate:(i_category = 'Children')
                                              TableScan [TS_2] (rows=462000 width=190)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_id","i_category"]
                            <-Reducer 21 [SIMPLE_EDGE]
                              SHUFFLE [RS_102]
                                PartitionCols:_col2
                                Select Operator [SEL_97] (rows=788222 width=110)
                                  Output:["_col2","_col4"]
                                  Merge Join Operator [MERGEJOIN_178] (rows=788222 width=110)
                                    Conds:RS_94._col2=RS_214._col0(Inner),Output:["_col1","_col3"]
                                  <-Map 22 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_214]
                                      PartitionCols:_col0
                                      Select Operator [SEL_211] (rows=8000000 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_210] (rows=8000000 width=112)
                                          predicate:(ca_gmt_offset = -6)
                                          TableScan [TS_15] (rows=40000000 width=112)
                                            default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_gmt_offset"]
                                  <-Reducer 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_94]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_177] (rows=3941109 width=118)
                                        Conds:RS_231._col0=RS_209._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_209]
                                          PartitionCols:_col0
                                          Select Operator [SEL_206] (rows=50 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_205] (rows=50 width=12)
                                              predicate:((d_moy = 9) and (d_year = 1999))
                                              TableScan [TS_12] (rows=73049 width=12)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                      <-Map 24 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_231]
                                          PartitionCols:_col0
                                          Select Operator [SEL_230] (rows=143931246 width=123)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_229] (rows=143931246 width=123)
                                              predicate:(ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                              TableScan [TS_82] (rows=144002668 width=123)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                <-Reducer 4 [CONTAINS] vectorized
                  Reduce Output Operator [RS_217]
                    PartitionCols:_col0
                    Group By Operator [GBY_216] (rows=1717 width=212)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Group By Operator [GBY_215] (rows=1717 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_33]
                          PartitionCols:_col0
                          Group By Operator [GBY_32] (rows=1717 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                            Merge Join Operator [MERGEJOIN_179] (rows=1384530 width=100)
                              Conds:RS_28._col0=RS_29._col2(Inner),Output:["_col1","_col7"]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_28]
                                PartitionCols:_col0
                                 Please refer to the previous Merge Join Operator [MERGEJOIN_170]
                            <-Reducer 16 [SIMPLE_EDGE]
                              SHUFFLE [RS_29]
                                PartitionCols:_col2
                                Select Operator [SEL_24] (rows=2876890 width=4)
                                  Output:["_col2","_col4"]
                                  Merge Join Operator [MERGEJOIN_174] (rows=2876890 width=4)
                                    Conds:RS_21._col2=RS_212._col0(Inner),Output:["_col1","_col3"]
                                  <-Map 22 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_212]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_211]
                                  <-Reducer 15 [SIMPLE_EDGE]
                                    SHUFFLE [RS_21]
                                      PartitionCols:_col2
                                      Merge Join Operator [MERGEJOIN_173] (rows=14384447 width=4)
                                        Conds:RS_204._col0=RS_207._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_207]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_206]
                                      <-Map 14 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_204]
                                          PartitionCols:_col0
                                          Select Operator [SEL_203] (rows=525327191 width=118)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_202] (rows=525327191 width=118)
                                              predicate:(ss_addr_sk is not null and ss_sold_date_sk is not null)
                                              TableScan [TS_9] (rows=575995635 width=118)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]
                <-Reducer 9 [CONTAINS] vectorized
                  Reduce Output Operator [RS_228]
                    PartitionCols:_col0
                    Group By Operator [GBY_227] (rows=1717 width=212)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Group By Operator [GBY_226] (rows=1717 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 8 [SIMPLE_EDGE]
                        SHUFFLE [RS_69]
                          PartitionCols:_col0
                          Group By Operator [GBY_68] (rows=1717 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(_col7)"],keys:_col1
                            Merge Join Operator [MERGEJOIN_180] (rows=746132 width=100)
                              Conds:RS_64._col0=RS_65._col3(Inner),Output:["_col1","_col7"]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_64]
                                PartitionCols:_col0
                                 Please refer to the previous Merge Join Operator [MERGEJOIN_170]
                            <-Reducer 19 [SIMPLE_EDGE]
                              SHUFFLE [RS_65]
                                PartitionCols:_col3
                                Select Operator [SEL_60] (rows=1550375 width=13)
                                  Output:["_col3","_col4"]
                                  Merge Join Operator [MERGEJOIN_176] (rows=1550375 width=13)
                                    Conds:RS_57._col1=RS_213._col0(Inner),Output:["_col2","_col3"]
                                  <-Map 22 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_213]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_211]
                                  <-Reducer 18 [SIMPLE_EDGE]
                                    SHUFFLE [RS_57]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_175] (rows=7751872 width=98)
                                        Conds:RS_225._col0=RS_208._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_208]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_206]
                                      <-Map 23 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_225]
                                          PartitionCols:_col0
                                          Select Operator [SEL_224] (rows=285117733 width=123)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_223] (rows=285117733 width=123)
                                              predicate:(cs_bill_addr_sk is not null and cs_sold_date_sk is not null)
                                              TableScan [TS_45] (rows=287989836 width=123)
                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_addr_sk","cs_item_sk","cs_ext_sales_price"]

