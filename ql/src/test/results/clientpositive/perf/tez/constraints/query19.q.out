PREHOOK: query: explain
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 12 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Reducer 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 13 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 9 <- Map 11 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_93]
        Limit [LIM_92] (rows=100 width=419)
          Number of rows:100
          Select Operator [SEL_91] (rows=2098703 width=418)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_90]
              Select Operator [SEL_89] (rows=2098703 width=418)
                Output:["_col2","_col3","_col4","_col5","_col6"]
                Group By Operator [GBY_88] (rows=2098703 width=314)
                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                <-Reducer 4 [SIMPLE_EDGE]
                  SHUFFLE [RS_35]
                    PartitionCols:_col0, _col1, _col2, _col3
                    Group By Operator [GBY_34] (rows=2098703 width=314)
                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col8)"],keys:_col12, _col11, _col13, _col14
                      Select Operator [SEL_33] (rows=2098703 width=570)
                        Output:["_col8","_col11","_col12","_col13","_col14"]
                        Filter Operator [FIL_32] (rows=2098703 width=570)
                          predicate:(_col3 <> _col16)
                          Merge Join Operator [MERGEJOIN_71] (rows=2098703 width=570)
                            Conds:RS_29._col7=RS_87._col0(Inner),Output:["_col3","_col8","_col11","_col12","_col13","_col14","_col16"]
                          <-Map 13 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_87]
                              PartitionCols:_col0
                              Select Operator [SEL_86] (rows=1704 width=188)
                                Output:["_col0","_col1"]
                                TableScan [TS_21] (rows=1704 width=93)
                                  default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_zip"]
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_29]
                              PartitionCols:_col7
                              Merge Join Operator [MERGEJOIN_70] (rows=2098703 width=386)
                                Conds:RS_26._col0=RS_27._col2(Inner),Output:["_col3","_col7","_col8","_col11","_col12","_col13","_col14"]
                              <-Reducer 10 [SIMPLE_EDGE]
                                SHUFFLE [RS_27]
                                  PartitionCols:_col2
                                  Merge Join Operator [MERGEJOIN_69] (rows=2098703 width=202)
                                    Conds:RS_17._col1=RS_85._col0(Inner),Output:["_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                  <-Map 12 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_85]
                                      PartitionCols:_col0
                                      Select Operator [SEL_84] (rows=7333 width=206)
                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                        Filter Operator [FIL_83] (rows=7333 width=210)
                                          predicate:(i_manager_id = 7)
                                          TableScan [TS_11] (rows=462000 width=210)
                                            default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_brand","i_manufact_id","i_manufact","i_manager_id"]
                                  <-Reducer 9 [SIMPLE_EDGE]
                                    SHUFFLE [RS_17]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_68] (rows=13737330 width=4)
                                        Conds:RS_79._col0=RS_82._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_82]
                                          PartitionCols:_col0
                                          Select Operator [SEL_81] (rows=50 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_80] (rows=50 width=12)
                                              predicate:((d_moy = 11) and (d_year = 1999))
                                              TableScan [TS_8] (rows=73049 width=12)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_79]
                                          PartitionCols:_col0
                                          Select Operator [SEL_78] (rows=501694138 width=122)
                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                            Filter Operator [FIL_77] (rows=501694138 width=122)
                                              predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_5] (rows=575995635 width=122)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ext_sales_price"]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_26]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_67] (rows=80000000 width=188)
                                    Conds:RS_74._col1=RS_76._col0(Inner),Output:["_col0","_col3"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_74]
                                      PartitionCols:_col1
                                      Select Operator [SEL_73] (rows=80000000 width=8)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_72] (rows=80000000 width=8)
                                          predicate:c_current_addr_sk is not null
                                          TableScan [TS_0] (rows=80000000 width=8)
                                            default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                                  <-Map 7 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_76]
                                      PartitionCols:_col0
                                      Select Operator [SEL_75] (rows=40000000 width=188)
                                        Output:["_col0","_col1"]
                                        TableScan [TS_3] (rows=40000000 width=93)
                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_zip"]

